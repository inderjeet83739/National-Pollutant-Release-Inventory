# -*- coding: utf-8 -*-
"""ML_Champs_NPRI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dl5-YXrdIpa4y85KwDJ3db36rxusx4qZ

### Importing Python Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""###We start by loading the dataset from multiple sheets within an Excel file. This dataset contains pollutant release information from different sources, including air, land, and water."""

df_q = pd.read_excel('NPRI_2000-2022.xlsx',sheet_name = 'Releases 2000-2020')
df_w = pd.read_excel('NPRI_2000-2022.xlsx',sheet_name = 'Disposals and Transfers 00-20')
df_e = pd.read_excel('NPRI_2000-2022.xlsx',sheet_name = 'Comments')

"""###We now inspect the dataset structure, checking for missing values, data types, and column names. This helps us understand the quality of our data."""

df_q.info()

df_w.info()

df_e.info()

"""### Merged three different sheets in NPRI Excel sheet"""

merged_df = pd.concat([df_q, df_w], axis=1)
merged_df = merged_df.loc[:,~merged_df.columns.duplicated()] # Removed extra spaces at the beginning of the line
df = pd.concat([merged_df,df_e], axis=1)
df = df.loc[:,~df.columns.duplicated()] # Removed extra spaces at the beginning of the line

"""### Doing basic EDA includes includes, shape, data types, missing values."""

df.info()

df.shape

df.dtypes

df.isnull().mean()*100

"""### From now, missing values are being handeled with the help of various methods, like linear interpolation, bfill, ffill, mode imputation and fillna(0). First we sorted the datset according to time series."""

columns = ['Release to Air - Fugitive','Release to Air - Other Non-Point ','Release to Air - Road dust  ','Release to Air - Spills ',
           'Release to Air - Stack / Point  ','Release to Air - Storage / Handling ','Releases to Land - Leaks','Releases to Land - Other ',
           'Releases to Land - Spills ','Releases to Water Bodies - Direct Discharges ','Releases to Water Bodies - Leaks',
           'Releases to Water Bodies - Spills ']

df_sorted = df.sort_values(by=['Reporting_Year / Année'])

for column in columns:
    df_sorted[column] = df_sorted[column].interpolate(method='linear')

for i in columns:
  df_sorted[i] = df_sorted[i].fillna(method = 'ffill')
  df_sorted[i] = df_sorted[i].fillna(method = 'bfill')

df_sorted['Number of employees'] = df_sorted['Number of employees'].fillna(df_sorted['Number of employees'].mode()[0])
df_sorted['Facility_Name / Installation'] = df_sorted['Facility_Name / Installation'].fillna(df_sorted['Facility_Name / Installation'].mode()[0])
df_sorted['Latitude'] = df_sorted['Latitude'].fillna(df_sorted['Latitude'].mode()[0])
df_sorted['Longitude'] = df_sorted['Longitude'].fillna(df_sorted['Longitude'].mode()[0])

df_sorted['City'] = df_sorted['City'].fillna(method = 'ffill')
df_sorted['City'] = df_sorted['City'].fillna(method = 'bfill')

df_sorted['Sum of release to all media (<1tonne)'] = df_sorted['Sum of release to all media (<1tonne)'].fillna(0)

df_sorted.isnull().mean()*100

del_columns = ['NAICS Title EN / Titre Code SCIAN EN','NAICS Title FR / Titre Code SCIAN FR','Substance Name (French) / Nom de substance (Français)',
               'Comment_Type_Name (English) Type_de_commentaire (Anglais)','Comment_Type_Name (French) Type_de_commentaire (Français)',
               'Comment / Commentaires']

for i in del_columns:
  df_sorted = df_sorted.drop(i,axis=1)

df_sorted.isnull().mean()*100

nex_columns = ['Off-site Disposal - Land Treatment','Off-site Disposal - Landfill',
               'Off-site Disposal - Storage','Off-site Disposal - Tailings Management',
           'Off-site Disposal - Underground Injection','Off-site Disposal - Waste Rock management',
               'Off-site Transfers for Recycling - Energy Recovery',
           'Off-site Transfers for Recycling - Other','Off-site Transfers for Recycling - Recovery of Acids and Bases',
               'Off-site Transfers for Recycling - Recovery of Catalysts',
           'Off-site Transfers for Recycling - Recovery of Inorganic Materials (not metals)',
               'Off-site Transfers for Recycling - Recovery of Metals and Metal Compounds',
           'Off-site Transfers for Recycling - Recovery of Organic Substances (not solvents)',
               'Off-site Transfers for Recycling - Recovery of Pollution Abatement Residues',
           'Off-site Transfers for Recycling - Recovery of Solvents',
               'Off-site Transfers for Recycling - Refining or Re-use of Used Oil',
           'Off-site Transfers for Treatment Prior to Final Disposal - Biological Treatment',
               'Off-site Transfers for Treatment Prior to Final Disposal - Chemical Treatment',
           'Off-site Transfers for Treatment Prior to Final Disposal - Incineration / Thermal',
               'Off-site Transfers for Treatment Prior to Final Disposal - Municipal Sewage Treatment Plant',
           'Off-site Transfers for Treatment Prior to Final Disposal - Physical Treatment',
               'On-site Disposal - Land Treatment','On-site Disposal - Landfill',
           'On-site Disposal - Tailings Management','On-site Disposal - Underground Injection',
               'On-site Disposal - Waste Rock management']

for i in nex_columns:
  df_sorted[i] = df_sorted[i].interpolate(method='linear')

for i in nex_columns:
  df_sorted[i] = df_sorted[i].fillna(method = 'ffill')
  df_sorted[i] = df_sorted[i].fillna(method = 'bfill')

df_sorted.isnull().mean()*100

"""### Sorted"""

df_sorted

df_sorted.to_csv('cleaned_data.csv',index= False)

"""###Outlier detection and capping stats here. we have used IQR (Inter Quartile range) method to detect and capped the outliers."""

df_new = pd.read_csv('cleaned_data.csv')

df_new

df.dtypes

def cap(column):
    # Calculate lower and upper bounds
    Q1 = df_new[column].quantile(0.25)
    Q3 = df_new[column].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Cap outliers
    df_new[column] = np.where(df_new[column] > upper_bound, upper_bound,
                              np.where(df_new[column] < lower_bound, lower_bound, df_new[column]))

out_columns = ['Release to Air - Fugitive','Release to Air - Other Non-Point ','Release to Air - Road dust  ','Release to Air - Spills ',
           'Release to Air - Stack / Point  ','Release to Air - Storage / Handling ','Releases to Land - Leaks','Releases to Land - Other ',
           'Releases to Land - Spills ','Releases to Water Bodies - Direct Discharges ','Releases to Water Bodies - Leaks',
           'Releases to Water Bodies - Spills ','Off-site Disposal - Land Treatment','Off-site Disposal - Landfill',
               'Off-site Disposal - Storage','Off-site Disposal - Tailings Management',
           'Off-site Disposal - Underground Injection','Off-site Disposal - Waste Rock management',
               'Off-site Transfers for Recycling - Energy Recovery',
           'Off-site Transfers for Recycling - Other','Off-site Transfers for Recycling - Recovery of Acids and Bases',
               'Off-site Transfers for Recycling - Recovery of Catalysts',
           'Off-site Transfers for Recycling - Recovery of Inorganic Materials (not metals)',
               'Off-site Transfers for Recycling - Recovery of Metals and Metal Compounds',
           'Off-site Transfers for Recycling - Recovery of Organic Substances (not solvents)',
               'Off-site Transfers for Recycling - Recovery of Pollution Abatement Residues',
           'Off-site Transfers for Recycling - Recovery of Solvents','Off-site Transfers for Recycling - Refining or Re-use of Used Oil',
           'Off-site Transfers for Treatment Prior to Final Disposal - Biological Treatment',
               'Off-site Transfers for Treatment Prior to Final Disposal - Chemical Treatment',
           'Off-site Transfers for Treatment Prior to Final Disposal - Incineration / Thermal',
               'Off-site Transfers for Treatment Prior to Final Disposal - Municipal Sewage Treatment Plant',
           'Off-site Transfers for Treatment Prior to Final Disposal - Physical Treatment',
               'On-site Disposal - Land Treatment','On-site Disposal - Landfill',
           'On-site Disposal - Tailings Management','On-site Disposal - Underground Injection',
               'On-site Disposal - Waste Rock management']

for i in out_columns:
  cap(i)

for i in out_columns:
  print(f"{i} Max: {df_new[i].max()}")
  print(f"{i} Min: {df_new[i].min()}")

df_new.shape

"""### From here, visualizing the required insights for predicting the Largest Provincial Decrease in Substance Releases Over the Next Five Years Using NPRI Data."""

plt.figure(figsize=(12,7))
sns.barplot(df_new['Reporting_Year / Année'].value_counts().sort_index())
plt.xticks(rotation=90)
plt.grid()
plt.show()

df_new['Company_Name / Dénomination_sociale_de_l\'entreprise'].value_counts()

df_p = df_new[df_new['Company_Name / Dénomination_sociale_de_l\'entreprise'] == 'Canadian Natural Resources Limited']

df_p['Reporting_Year / Année'].value_counts().sort_index()

columns_to_sum = ['Release to Air - Fugitive','Release to Air - Other Non-Point ','Release to Air - Road dust  ','Release to Air - Spills ',
           'Release to Air - Stack / Point  ','Release to Air - Storage / Handling ','Releases to Land - Leaks','Releases to Land - Other ',
           'Releases to Land - Spills ','Releases to Water Bodies - Direct Discharges ','Releases to Water Bodies - Leaks',
           'Releases to Water Bodies - Spills ']
df_new['total_releases'] = df_new[columns_to_sum].sum(axis=1)

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'Reporting_Year / Année' is the year column,
# 'Sum of release to all media (<1tonne)' is the spill amount column,
# and 'Units / Unités' is the units column

year_column = 'Reporting_Year / Année'
spill_amount_column = 'total_releases'
units_column = 'Units / Unités'

# Group by year and unit to calculate the spill count
yearly_unit_data = df_new.groupby([year_column, units_column]).agg(
    spill_count=('NPRI_ID / No_INRP', 'count')
).reset_index()

# Pivot the data so each unit has its own column
yearly_unit_pivot = yearly_unit_data.pivot(
    index=year_column, columns=units_column, values='spill_count'
).fillna(0)

# Plot the Yearly Spill Count for each Unit
plt.figure(figsize=(12, 5))
for unit in yearly_unit_pivot.columns:
    plt.plot(
        yearly_unit_pivot.index,
        yearly_unit_pivot[unit],
        marker='o',
        linestyle='-',
        label=unit,
    )

plt.yscale('log')  # Apply logarithmic scale
plt.title("Yearly Spill Count by Unit from 2000 to 2022")
plt.xlabel("Year")
plt.ylabel("Spill Count (Log Scale)")
plt.legend(title="Unit")
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

year_column = 'Reporting_Year / Année'
spill_amount_column = 'total_releases'
units_column = 'Units / Unités'
industry_column = 'NAICS / Code_SCIAN' # Defining industry column


# Calculating spill count for each industry and year
top_industries_data = df_new.groupby([year_column, industry_column]).agg(
    spill_count=('NPRI_ID / No_INRP', 'count')
).reset_index()

# Get the top 5 industries based on overall spill count
top_industries = top_industries_data.groupby(industry_column)['spill_count'].sum().nlargest(5).index.tolist()



# Step 3.5: Create a mapping between NAICS codes and company names
naics_to_company = df_new.set_index('NAICS / Code_SCIAN')['Company_Name / Dénomination_sociale_de_l\'entreprise'].to_dict()

# Plotting Spill Count for Top 5 Industries with Company Names in Legend
plt.figure(figsize=(12, 7))
for industry in top_industries:
    industry_data = top_industries_data[top_industries_data[industry_column] == industry]
    # Get the company name using the mapping
    company_name = naics_to_company.get(industry, 'Unknown Company')  # Handle cases where NAICS code is not found
    plt.plot(industry_data[year_column], industry_data['spill_count'], marker='o', label=company_name)

plt.title("Yearly Spill Count for Top 5 Industries from 2000 to 2022")
plt.xlabel("Year")
plt.ylabel("Spill Count")
plt.legend(title="Company", loc="upper right", bbox_to_anchor=(1.4, 1))  # Update legend title
plt.grid(True)
plt.show()

df_new['PROVINCE'].value_counts()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.barplot(x='PROVINCE', y='total_releases', data=df_new)
plt.title('Total Spill Count by Province')
plt.xlabel('Province')
plt.ylabel('Spill Count')
plt.xticks(rotation=45)
plt.grid()
plt.show()

df_new['Substance Name (English) / Nom de substance (Anglais)'].value_counts()

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate total spill amount for each substance
substance_spill_sum = df_new.groupby('Substance Name (English) / Nom de substance (Anglais)')['total_releases'].sum()

# Get the top 10 substances with the highest spill amounts
top_10_substances = substance_spill_sum.nlargest(10)

# Create the bar plot
plt.figure(figsize=(12, 6))  # Adjust figure size as needed
sns.barplot(x=top_10_substances.index, y=top_10_substances.values)
plt.title('Top 10 Substances with Highest Total Spill Amounts')
plt.xlabel('Substance Name')
plt.ylabel('Total Spill Amount')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.grid(True)
plt.show()

air_spill = ['Release to Air - Fugitive','Release to Air - Other Non-Point ',
             'Release to Air - Road dust  ','Release to Air - Spills ',
             'Release to Air - Stack / Point  ','Release to Air - Storage / Handling ']
df_new['Air_spill'] = df_new[air_spill].sum(axis=1)


land_spill = ['Releases to Land - Leaks','Releases to Land - Other ','Releases to Land - Spills ']
df_new['Land_spill'] = df_new[land_spill].sum(axis=1)


water_spill = ['Releases to Water Bodies - Direct Discharges ','Releases to Water Bodies - Leaks',
               'Releases to Water Bodies - Spills ']
df_new['Water_spill'] = df_new[water_spill].sum(axis=1)

spills = [df_new['Air_spill'].sum(),df_new['Land_spill'].sum(),df_new['Water_spill'].sum()]
labels = ['Air Spill','Land Spill','Water Spill']

sns.barplot(x=labels,y=spills,edgecolor = 'black')
plt.title('Total Spill Count by Spill Type')
plt.xlabel('Spill Type')
plt.ylabel('Total Spill Amount')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

df_new.to_csv("cleaneddataset_NPRI.csv",index = False)